package bob;

import java.io.ByteArrayInputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.nio.ByteBuffer;
import java.security.KeyFactory;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.MessageDigest;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.Signature;
import java.security.spec.X509EncodedKeySpec;

import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import javax.xml.bind.DatatypeConverter;

public class Bob {
	// Constants
	private final int keySize = 1024;

	// Sockets for communication
	private ServerSocket bob = null;
	private Socket alice = null;
	private boolean debug;

	// Generated by Bob
	private PublicKey pubB = null;
	private PrivateKey privB = null;
	private PublicKey pubC = null;
	private PrivateKey privC = null;

	// Received from Alice
	private PublicKey pubA = null;

	public Bob(int port, boolean _debug) {
		try {
			debug = _debug;

			// Generate the shared key pair
			KeyPairGenerator generator = KeyPairGenerator.getInstance("RSA");
			generator.initialize(keySize);
			KeyPair pair = generator.generateKeyPair();

			// Get the shared public and private keys
			pubC = pair.getPublic();
			privC = pair.getPrivate();

			// Generate Bob's key pair
			pair = generator.generateKeyPair();

			// Get Bob's public and private keys
			pubB = pair.getPublic();
			privB = pair.getPrivate();
		} catch (Exception e) {
			System.out.println(e.getMessage());
			System.exit(1);
		}

		// Make bob's socket
		try {
			bob = new ServerSocket(port);
			alice = bob.accept();
		} catch (Exception e) {
			System.out.println(e.getMessage());
			System.exit(1);
		}

		try {
			if (debug) {
				System.out.println(
						"--------------------------------------------------------------------------------------------");
				System.out.println("Third-party public key using RSA is:");
				System.out.println(DatatypeConverter.printHexBinary(pubC.getEncoded()));
				System.out.println("");
				System.out.println("Sending third-party key to Alice:");
				System.out.println(
						"--------------------------------------------------------------------------------------------");
			}

			// Send the shared public key to Alice
			ByteBuffer sendBuffer = ByteBuffer.allocate(4);
			sendBuffer.putInt(pubC.getEncoded().length);

			alice.getOutputStream().write(sendBuffer.array());
			alice.getOutputStream().write(pubC.getEncoded());
			alice.getOutputStream().flush();
		} catch (Exception e) {
			System.out.println(e.getMessage());
			System.exit(1);
		}

		try {
			// Receive Alice's public key
			// The first four bytes is the length
			byte[] contLength = new byte[4];
			alice.getInputStream().read(contLength, 0, 4);
			ByteBuffer pubABuffer = ByteBuffer.wrap(contLength);
			int length = pubABuffer.getInt();

			// Read length bytes
			byte[] pubABytes = new byte[length];
			alice.getInputStream().read(pubABytes);

			// Generate the public key from the received bytesf
			X509EncodedKeySpec ks = new X509EncodedKeySpec(pubABytes);
			KeyFactory kf = KeyFactory.getInstance("RSA");
			pubA = kf.generatePublic(ks);

			if (debug) {
				System.out.println("Alice's public key was received");
				System.out.println("");
				System.out.println("Alice's public key is:");
				System.out.println(DatatypeConverter.printHexBinary(pubA.getEncoded()));
				System.out.println(
						"--------------------------------------------------------------------------------------------");
			}
		} catch (Exception e) {
			System.out.println(e.getMessage());
			System.exit(1);
		}
	}

	public void communicate() {
		/*
		 * Send the initial information
		 * 
		 * All messages are delimited by a length field of 4 bytes, which inform
		 * the reciever how many of the following bytes he or she should read
		 */

		// Make the message digest and signature of Bob's public key
		// Send the third-party public key, Bob's public key, and the signature
		try {
			if (debug) {
				System.out.println("PROGRAM FLOW STARTS HERE");
				System.out.println("SENDING BOB'S PUBLIC KEY TO ALICE");
				System.out.println("");

				System.out.println("Preparing signed message digest of Bob's public key");
				System.out.println("");
			}

			MessageDigest md = MessageDigest.getInstance("SHA-1");
			md.update(pubB.getEncoded());
			byte[] digest = md.digest();

			if (debug) {
				System.out.println("Bob's public key using RSA is:");
				System.out.println(DatatypeConverter.printHexBinary(pubB.getEncoded()));
				System.out.println("");

				System.out.println("Message digest of Bob's public key using SHA-1 is:");
				System.out.println(DatatypeConverter.printHexBinary(digest));
				System.out.println("");
			}

			Signature signer = Signature.getInstance("SHA1withRSA");
			signer.initSign(privC);
			signer.update(digest);
			byte[] signature = signer.sign();

			if (debug) {
				System.out.println("Signature of Bob's public key using the third-party private key is:");
				System.out.println(DatatypeConverter.printHexBinary(signature));
				System.out.println("");

				System.out.println("Sending Bob's public key along with the signature of Bob's public key");
				System.out.println(
						"--------------------------------------------------------------------------------------------");
			}

			// Send Bob's public key to Alice
			ByteBuffer sendBuffer = ByteBuffer.allocate(4);
			sendBuffer.putInt(pubB.getEncoded().length);

			alice.getOutputStream().write(sendBuffer.array());
			alice.getOutputStream().write(pubB.getEncoded());
			alice.getOutputStream().flush();

			// Send the signed message digest of Bob's public key to Alice
			sendBuffer = ByteBuffer.allocate(4);
			sendBuffer.putInt(signature.length);

			alice.getOutputStream().write(sendBuffer.array());
			alice.getOutputStream().write(signature);
			alice.getOutputStream().flush();
		} catch (Exception e) {
			System.out.println(e.getMessage());
			System.exit(1);
		}

		// Receive Alice's public key and Alice's message
		try {
			if (debug) {
				System.out.println("RECEIVING PACKAGE FROM ALICE");
				System.out.println("");
			}

			// Recieve the content from Alice
			// The first four bytes is the length
			byte[] contLength = new byte[4];
			alice.getInputStream().read(contLength, 0, 4);
			ByteBuffer contBuffer = ByteBuffer.wrap(contLength);
			int length = contBuffer.getInt();

			// Read length bytes
			byte[] content = new byte[length];
			alice.getInputStream().read(content);

			// Receive the symmetric key from Alice
			// The first four bytes is the length
			contLength = new byte[4];
			alice.getInputStream().read(contLength, 0, 4);
			ByteBuffer symBuffer = ByteBuffer.wrap(contLength);
			length = symBuffer.getInt();

			// Read length bytes
			byte[] symKeyEnc = new byte[length];
			alice.getInputStream().read(symKeyEnc);

			if (debug) {
				System.out.println("Alice's package was received!");
				System.out.println(
						"--------------------------------------------------------------------------------------------");

				System.out.println("Decrypting the symmetric key using Bob's private key");
				System.out.println("");
			}

			// Reconstruct the key
			Cipher cipher = Cipher.getInstance("RSA/ECB/OAEPWithSHA-1AndMGF1Padding");
			cipher.init(Cipher.DECRYPT_MODE, privB);
			byte[] key = cipher.doFinal(symKeyEnc);

			SecretKey symKey = new SecretKeySpec(key, 0, key.length, "DESede");

			if (debug) {
				System.out.println("The symmetric key using DESede is:");
				System.out.println(DatatypeConverter.printHexBinary(symKey.getEncoded()));
				System.out.println(
						"--------------------------------------------------------------------------------------------");
			}

			Cipher symCipher = Cipher.getInstance("DESede");

			symCipher.init(Cipher.DECRYPT_MODE, symKey);
			byte[] decContent = symCipher.doFinal(content);

			if (debug) {
				System.out.println("Decrypting the signature and message using the symmetric key");
				System.out.println(
						"--------------------------------------------------------------------------------------------");
			}

			ByteArrayInputStream stream = new ByteArrayInputStream(decContent);

			// The first four bytes is the length
			contLength = new byte[4];
			stream.read(contLength, 0, 4);
			ByteBuffer messageBuffer = ByteBuffer.wrap(contLength);
			length = messageBuffer.getInt();

			// Read length bytes
			byte[] message = new byte[length];
			stream.read(message);

			contLength = new byte[4];
			stream.read(contLength, 0, 4);
			ByteBuffer signBuffer = ByteBuffer.wrap(contLength);
			length = signBuffer.getInt();

			// Read length bytes
			byte[] signEnc = new byte[length];
			stream.read(signEnc);

			if (debug) {
				System.out.println("Alice's signature is:");
				System.out.println(DatatypeConverter.printHexBinary(signEnc));
				System.out.println("");
			}

			// Make a message digest of Bob's public key
			MessageDigest md = MessageDigest.getInstance("SHA-1");
			md.update(message);
			byte[] messageDigest = md.digest();

			if (debug) {
				System.out.println("The expected message digest using SHA-1 is:");
				System.out.println(DatatypeConverter.printHexBinary(messageDigest));
				System.out.println(
						"--------------------------------------------------------------------------------------------");

				System.out.println(
						"Verifying the signature using SHA-1 with RSA, Alice's public key, and the expected digest...");
			}

			// Verify the signature with the shared public key
			Signature verifier = Signature.getInstance("SHA1withRSA");
			verifier.initVerify(pubA);
			verifier.update(messageDigest);
			boolean verified = verifier.verify(signEnc);

			if (debug) {
				if (verified) {
					System.out.println("The signature has been verified!");
				} else {
					System.out.println("Uh-oh, the signature was not verified :(");
				}
			}

			System.out.println(
					"--------------------------------------------------------------------------------------------");
			System.out.println("Here is the message from Alice:");
			System.out.println(new String(message, "UTF8"));
			System.out.println(
					"--------------------------------------------------------------------------------------------");
		} catch (Exception e) {
			System.out.println(e.getMessage());
			System.exit(1);
		}
	}
}
