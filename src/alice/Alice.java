package alice;

import java.io.ByteArrayOutputStream;
import java.net.Socket;
import java.nio.ByteBuffer;
import java.security.KeyFactory;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.Signature;
import java.security.spec.X509EncodedKeySpec;

import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import javax.xml.bind.DatatypeConverter;

/**
 * 
 * @author Kyle Pierson
 * 
 */
public class Alice {
	// Constants
	private final int keySize = 1024;

	// The socket connection with Bob
	private Socket bob = null;
	private boolean debug;

	// These are generated by Alice
	private PublicKey pubA = null;
	private PrivateKey privA = null;

	// These are received from Bob
	private PublicKey pubB = null;
	private PublicKey pubC = null;

	/**
	 * 
	 */
	public Alice(String ip, int port, boolean _debug) {
		// Generate Alice's key pair
		try {
			debug = _debug;
			KeyPairGenerator generator = KeyPairGenerator.getInstance("RSA");
			generator.initialize(keySize);
			KeyPair pair = generator.generateKeyPair();

			// Get the Alice's public and private keys
			pubA = pair.getPublic();
			privA = pair.getPrivate();
		} catch (NoSuchAlgorithmException e) {
			System.out.println(e.getMessage());
			System.exit(0);
		}

		// Initialize server connection
		try {
			bob = new Socket(ip, port);
		} catch (Exception e) {
			System.out.println(e.getMessage());
			System.exit(1);
		}
		try {
			// Send Alice's public key to Bob

			if (debug) {
				System.out.println("--------------------------------------------------------------------");
				System.out.println("Alice's public key using RSA is:");
				System.out.println(DatatypeConverter.printHexBinary(pubA.getEncoded()));
				System.out.println("");
				System.out.println("Sending Alice's public key");
				System.out.println("--------------------------------------------------------------------");
			}
			ByteBuffer sendBuffer = ByteBuffer.allocate(4);
			sendBuffer.putInt(pubA.getEncoded().length);

			bob.getOutputStream().write(sendBuffer.array());
			bob.getOutputStream().write(pubA.getEncoded());
			bob.getOutputStream().flush();
		} catch (Exception e) {
			System.out.println(e.getMessage());
			System.exit(1);
		}
		try {
			// Receive the shared public key from Bob
			// The first four bytes is the length
			byte[] keyLength = new byte[4];
			bob.getInputStream().read(keyLength, 0, 4);
			ByteBuffer buffer = ByteBuffer.wrap(keyLength);
			int length = buffer.getInt();

			// Read length bytes
			byte[] pubCBytes = new byte[length];
			bob.getInputStream().read(pubCBytes);

			// Generate the shared public key from the received bytes
			X509EncodedKeySpec ks = new X509EncodedKeySpec(pubCBytes);
			KeyFactory kf = KeyFactory.getInstance("RSA");
			pubC = kf.generatePublic(ks);

			if (debug) {
				System.out.println("Third-party public key received:");
				System.out.println("");
				System.out.println("Third-party public key is:");
				System.out.println(DatatypeConverter.printHexBinary(pubC.getEncoded()));
				System.out.println("--------------------------------------------------------------------");
			}

		} catch (Exception e) {
			System.out.println(e.getMessage());
			System.exit(1);
		}
	}

	/**
	 * 
	 */
	public void send(String message) {
		try {
			if (debug) {
				System.out.println("PROGRAM FLOW STARTS HERE");
				System.out.println("RECEIVING BOB'S PUBLIC KEY");
				System.out.println("");
			}

			// Receive Bob's public key from Bob
			// The first four bytes is the length
			byte[] keyLength = new byte[4];
			bob.getInputStream().read(keyLength, 0, 4);
			ByteBuffer buffer = ByteBuffer.wrap(keyLength);
			int length = buffer.getInt();

			// Read length bytes
			byte[] pubBBytes = new byte[length];
			bob.getInputStream().read(pubBBytes);

			// Generate Bob's public key from the received bytes
			X509EncodedKeySpec ks = new X509EncodedKeySpec(pubBBytes);
			KeyFactory kf = KeyFactory.getInstance("RSA");
			pubB = kf.generatePublic(ks);

			if (debug) {
				System.out.println("Bob's public key received:");
				System.out.println("");
				System.out.println("Bob's public key is:");
				System.out.println(DatatypeConverter.printHexBinary(pubB.getEncoded()));
				System.out.println("--------------------------------------------------------------------");
			}

			// Read in the signature for Bob's public key
			// The first four bytes is the length
			byte[] signLength = new byte[4];
			bob.getInputStream().read(signLength, 0, 4);
			buffer = ByteBuffer.wrap(signLength);
			length = buffer.getInt();

			// Read length bytes
			byte[] signBytes = new byte[length];
			bob.getInputStream().read(signBytes);

			if (debug) {
				System.out.println("Signature of Bob's public key is:");
				System.out.println(DatatypeConverter.printHexBinary(signBytes));
				System.out.println("");
			}

			// Make a message digest of Bob's public key
			MessageDigest md = MessageDigest.getInstance("SHA-1");
			md.update(pubB.getEncoded());
			byte[] pubBdigest = md.digest();

			if (debug) {
				System.out.println("Expected message digest of Bob's public key using SHA-1 is:");
				System.out.println(DatatypeConverter.printHexBinary(pubBdigest));
				System.out.println("");
				System.out.println(
						"Verifying the signature using SHA-1, RSA, the third-party public key, and the expected message digest...");
			}

			// Verify the signature with the shared public key
			Signature verifier = Signature.getInstance("SHA1withRSA");
			verifier.initVerify(pubC);
			verifier.update(pubBdigest);
			boolean verified = verifier.verify(signBytes);

			if (debug) {
				if (verified) {
					System.out.println("Bob's public key has been verified");
				} else {
					System.out.println("WARNING: Bob's public key has NOT been verified");
				}

				System.out.println("--------------------------------------------------------------------");

				System.out.println("SENDING THE MESSAGE TO BOB");
				System.out.println("");

				System.out.println("The message is:");
				System.out.println(message);
				System.out.println("");
			}

			// Make a message digest and sign it with the shared private key
			md.update(message.getBytes("UTF8"));
			byte[] digest = md.digest();

			Signature signer = Signature.getInstance("SHA1withRSA");
			signer.initSign(privA);
			signer.update(digest);
			byte[] signature = signer.sign();

			if (debug) {
				System.out.println("The message digest using SHA-1 is:");
				System.out.println(DatatypeConverter.printHexBinary(digest));
				System.out.println("");

				System.out
						.println("Signature of the message using SHA-1, RSA, Alice's private key, and the digest is:");
				System.out.println(DatatypeConverter.printHexBinary(signature));
				System.out.println("");
				System.out.println("Preparing content of package with the message and the signed digest");
				System.out.println("--------------------------------------------------------------------");
			}

			// Make a byte array to hold the message and signature
			ByteArrayOutputStream stream = new ByteArrayOutputStream();

			// Send the message, with the length first
			ByteBuffer prepBuffer = ByteBuffer.allocate(4);
			prepBuffer.putInt(message.getBytes("UTF8").length);
			stream.write(prepBuffer.array());

			stream.write(message.getBytes("UTF8"));

			// Send the signature of the message, with the length first
			prepBuffer = ByteBuffer.allocate(4);
			prepBuffer.putInt(signature.length);
			stream.write(prepBuffer.array());

			stream.write(signature);

			// Create the symmetric key and use it to encrypt the content
			SecretKey key = KeyGenerator.getInstance("DESede").generateKey();
			Cipher symCipher = Cipher.getInstance("DESede");

			if (debug) {
				System.out.println("The symmetric key generated using DESede is:");
				System.out.println(DatatypeConverter.printHexBinary(key.getEncoded()));
				System.out.println("");

				System.out.println("Encrypting the symmetric key with Bob's public key");
			}

			symCipher.init(Cipher.ENCRYPT_MODE, key);
			byte[] encryption = symCipher.doFinal(stream.toByteArray());

			// Encrypt the symmetric key with Bob's public key
			Cipher cipher = Cipher.getInstance("RSA/ECB/OAEPWithSHA-1AndMGF1Padding");
			cipher.init(Cipher.ENCRYPT_MODE, pubB);

			byte[] symKey = cipher.doFinal(key.getEncoded());

			if (debug) {
				System.out.println("--------------------------------------------------------------------");
				System.out.println("Sending the encrypted content, and the encrypted symmetric key");
				System.out.println("--------------------------------------------------------------------");
			}

			// Send the encrypted content to Bob
			ByteBuffer sendBuffer = ByteBuffer.allocate(4);
			sendBuffer.putInt(encryption.length);

			bob.getOutputStream().write(sendBuffer.array());
			bob.getOutputStream().write(encryption);
			bob.getOutputStream().flush();

			// Send encrypted symmetric key to Bob
			sendBuffer = ByteBuffer.allocate(4);
			sendBuffer.putInt(symKey.length);

			bob.getOutputStream().write(sendBuffer.array());
			bob.getOutputStream().write(symKey);
			bob.getOutputStream().flush();
		} catch (Exception e) {
			System.out.println(e.getMessage());
			System.exit(0);
		}
	}
}
